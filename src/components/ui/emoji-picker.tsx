import { useState, useMemo } from 'react';
import { Search, Smile, Leaf, Coffee, Globe, Heart, Activity, Flag } from 'lucide-react';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

const EMOJI_CATEGORIES = [
  {
    id: 'smileys',
    label: 'Pessoas',
    icon: Smile,
    emojis: [
      'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ',
      'üôÇ', 'üôÉ', 'ü´†', 'üòâ', 'üòä', 'üòá', 'ü•∞', 'üòç',
      'ü§©', 'üòò', 'üòó', '‚ò∫Ô∏è', 'üòö', 'üòô', 'ü•≤', 'üòã',
      'üòõ', 'üòú', 'ü§™', 'üòù', 'ü§ë', 'ü§ó', 'ü§≠', 'ü´¢',
      'ü´£', 'ü§´', 'ü§î', 'ü´°', 'ü§ê', 'ü§®', 'üòê', 'üòë',
      'üò∂', 'ü´•', 'üòè', 'üòí', 'üôÑ', 'üò¨', 'ü§•', 'üòå',
    ]
  },
  {
    id: 'nature',
    label: 'Natureza',
    icon: Leaf,
    emojis: [
      'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº',
      'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üêΩ', 'üê∏', 'üêµ',
      'üôà', 'üôâ', 'üôä', 'üêí', 'üêî', 'üêß', 'üê¶', 'üê§',
      'üå±', 'üåø', 'üçÄ', 'üåæ', 'üåª', 'üå∫', 'üå∏', 'üåº',
      'üå∑', 'ü•Ä', 'üåπ', 'üèµÔ∏è', 'üíê', 'üçÑ', 'üå∞', 'ü¶Ä',
    ]
  },
  {
    id: 'food',
    label: 'Comida',
    icon: Coffee,
    emojis: [
      'üçé', 'üçè', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì',
      'ü´ê', 'üçà', 'üçí', 'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ù',
      'üçÖ', 'üçÜ', 'ü•ë', 'ü•¶', 'ü•¨', 'ü•í', 'üå∂Ô∏è', 'ü´ë',
      'üåΩ', 'ü•ï', 'ü´í', 'üßÑ', 'üßÖ', 'ü•î', 'üç†', 'ü•ê',
      'ü•Ø', 'üçû', 'ü•ñ', 'ü•®', 'üßÄ', 'ü•ö', 'üç≥', 'üßà',
    ]
  },
  {
    id: 'activities',
    label: 'Atividades',
    icon: Activity,
    emojis: [
      '‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ',
      'ü•è', 'üé±', 'ü™Ä', 'üèì', 'üè∏', 'üèí', 'üèë', 'ü•ç',
      'üèè', 'ü™É', 'ü•Ö', '‚õ≥', 'ü™Å', 'üèπ', 'üé£', 'ü§ø',
      'ü•ä', 'ü•ã', 'üéΩ', 'üõπ', 'üõº', 'üõ∑', '‚õ∏Ô∏è', 'ü•å',
      'üéø', '‚õ∑Ô∏è', 'üèÇ', 'ü™Ç', 'üèãÔ∏è', 'ü§º', 'ü§∏', 'ü§∫',
    ]
  },
  {
    id: 'travel',
    label: 'Viagens',
    icon: Globe,
    emojis: [
      'üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üèéÔ∏è', 'üöì', 'üöë',
      'üöí', 'üöê', 'üõª', 'üöö', 'üöõ', 'üöú', 'ü¶Ø', 'ü¶Ω',
      'ü¶º', 'üõ¥', 'üö≤', 'üõµ', 'üèçÔ∏è', 'üõ∫', 'üö®', 'üöî',
      'üöç', 'üöò', 'üöñ', 'üö°', 'üö†', 'üöü', 'üöÉ', 'üöã',
      'üöû', 'üöù', 'üöÑ', 'üöÖ', 'üöà', 'üöÇ', 'üöÜ', 'üöá',
    ]
  },
  {
    id: 'objects',
    label: 'Objetos',
    icon: Heart,
    emojis: [
      '‚åö', 'üì±', 'üì≤', 'üíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üñ®Ô∏è', 'üñ±Ô∏è',
      'üñ≤Ô∏è', 'üïπÔ∏è', 'üóúÔ∏è', 'üíæ', 'üíø', 'üìÄ', 'üìº', 'üì∑',
      'üì∏', 'üìπ', 'üé•', 'üìΩÔ∏è', 'üéûÔ∏è', 'üìû', '‚òéÔ∏è', 'üìü',
      'üì†', 'üì∫', 'üìª', 'üéôÔ∏è', 'üéöÔ∏è', 'üéõÔ∏è', 'üß≠', '‚è±Ô∏è',
      '‚è≤Ô∏è', '‚è∞', 'üï∞Ô∏è', '‚åõ', '‚è≥', 'üì°', 'üîã', 'üîå',
    ]
  },
  {
    id: 'symbols',
    label: 'S√≠mbolos',
    icon: Flag,
    emojis: [
      '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç',
      'ü§é', 'üíî', '‚ù§Ô∏è‚Äçüî•', '‚ù§Ô∏è‚Äçü©π', '‚ù£Ô∏è', 'üíï', 'üíû', 'üíì',
      'üíó', 'üíñ', 'üíò', 'üíù', 'üíü', '‚òÆÔ∏è', '‚úùÔ∏è', '‚ò™Ô∏è',
      'üïâÔ∏è', '‚ò∏Ô∏è', '‚ú°Ô∏è', 'üîØ', 'üïé', '‚òØÔ∏è', '‚ò¶Ô∏è', 'üõê',
      '‚õé', '‚ôà', '‚ôâ', '‚ôä', '‚ôã', '‚ôå', '‚ôç', '‚ôé',
    ]
  },
];

interface EmojiPickerProps {
  value?: string;
  onChange: (emoji: string) => void;
  children: React.ReactNode;
}

export function EmojiPicker({ onChange, children }: EmojiPickerProps) {
  const [open, setOpen] = useState(false);
  const [search, setSearch] = useState('');
  const [activeCategory, setActiveCategory] = useState('smileys');

  // Filtrar emojis por busca
  const filteredCategories = useMemo(() => {
    if (!search.trim()) {
      return EMOJI_CATEGORIES;
    }

    return EMOJI_CATEGORIES.map(category => ({
      ...category,
      emojis: category.emojis.filter(() => {
        // Aqui voc√™ pode adicionar l√≥gica mais sofisticada de busca
        // Por enquanto, mantemos todos os emojis quando h√° busca
        return true;
      })
    })).filter(category => category.emojis.length > 0);
  }, [search]);

  const handleEmojiSelect = (emoji: string) => {
    onChange(emoji);
    setOpen(false);
    setSearch('');
  };

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        {children}
      </PopoverTrigger>
      <PopoverContent className="w-[320px] p-0" align="start">
        <div className="flex flex-col h-[400px]">
          {/* Header com t√≠tulo e busca */}
          <div className="p-3 border-b">
            <h3 className="font-semibold text-sm mb-2">Emojis</h3>
            <div className="relative">
              <Search className="absolute left-2.5 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
              <Input
                type="text"
                placeholder="Nome do emoji"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                className="pl-9 h-9"
              />
            </div>
          </div>

          {/* Tabs de categorias */}
          <div className="flex items-center gap-1 px-2 py-2 border-b overflow-x-auto">
            {EMOJI_CATEGORIES.map((category) => {
              const Icon = category.icon;
              return (
                <Button
                  key={category.id}
                  variant={activeCategory === category.id ? 'secondary' : 'ghost'}
                  size="sm"
                  className="h-8 w-8 p-0 flex-shrink-0"
                  onClick={() => setActiveCategory(category.id)}
                  title={category.label}
                >
                  <Icon className="h-4 w-4" />
                </Button>
              );
            })}
          </div>

          {/* Grid de emojis */}
          <div className="flex-1 overflow-y-auto p-2">
            {filteredCategories
              .filter(cat => search.trim() || cat.id === activeCategory)
              .map((category) => (
                <div key={category.id} className="mb-3">
                  {search.trim() && (
                    <h4 className="text-xs font-medium text-slate-500 mb-2 px-1">
                      {category.label}
                    </h4>
                  )}
                  <div className="grid grid-cols-8 gap-1">
                    {category.emojis.map((emoji, index) => (
                      <button
                        key={`${emoji}-${index}`}
                        className="h-8 w-8 flex items-center justify-center text-xl hover:bg-slate-100 rounded transition-colors"
                        onClick={() => handleEmojiSelect(emoji)}
                        type="button"
                      >
                        {emoji}
                      </button>
                    ))}
                  </div>
                </div>
              ))}
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
}

